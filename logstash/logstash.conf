# logstash.conf
# This configuration parses logs based on the `log_type` field set by Filebeat.
# Replace placeholder values in {{ }} with your actual setup (Elasticsearch host, credentials, etc.).

input {
  beats {
    port => {{LOGSTASH_PORT}}  # e.g. 5044
  }
}

###############################################################
# LOG TYPE HANDLING NOTES
#
# Each log_type may differ in structure and origin. 
# Therefore, we use specific parsing strategies per type:
#
# - {{LOG_TYPE_1}}:
#     Assumes the log message is already present in the `message` field.
#     The timestamp is extracted directly from the beginning of `message`
#     using a Grok pattern and then parsed into @timestamp.
#
# - {{LOG_TYPE_2}}:
#     Filebeat sends the original log line into `event.original`,
#     so we first copy it into `message` for consistency.
#     We then extract the timestamp from `message` using a Grok pattern.
#
# This approach ensures proper timestamp alignment regardless of Filebeat settings.
# You can unify behavior by always copying from `event.original`,
# but here we illustrate both scenarios explicitly for clarity.
###############################################################

filter {

  #############################
  # Logs of type: {{LOG_TYPE_1}}
  #############################
  if [log_type] == "{{LOG_TYPE_1}}" {
    grok {
      match => {
        "message" => "(?<log_timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}) - %{GREEDYDATA:log_message}"
      }
    }

    date {
      match => ["log_timestamp", "yyyy-MM-dd HH:mm:ss"]
      target => "@timestamp"
      timezone => "Europe/Warsaw"
    }

    mutate {
      remove_field => ["log_timestamp"]
    }
  }

  #############################
  # Logs of type: {{LOG_TYPE_2}}
  #############################
  if [log_type] == "{{LOG_TYPE_2}}" {

    mutate {
      copy => { "event.original" => "message" }
    }

    grok {
      match => {
        "message" => "(?<log_timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}[,0-9]+) %{GREEDYDATA:log_message}"
      }
    }

    date {
      match => [ "log_timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
      target => "@timestamp"
      timezone => "Europe/Warsaw"
    }

    mutate {
      remove_field => ["log_timestamp"]
    }
  }

}

output {

  #############################
  # Output for {{LOG_TYPE_1}}
  #############################
  if [log_type] == "{{LOG_TYPE_1}}" {
    elasticsearch {
      hosts => ["{{ELASTICSEARCH_HOST}}"]
      user => "{{ES_USER}}"
      password => "{{ES_PASSWORD}}"
      index => "{{INDEX_LOG_TYPE_1}}"  # e.g. raport-sync-prd-logs
    }
  }

  #############################
  # Output for {{LOG_TYPE_2}}
  #############################
  if [log_type] == "{{LOG_TYPE_2}}" {
    elasticsearch {
      hosts => ["{{ELASTICSEARCH_HOST}}"]
      user => "{{ES_USER}}"
      password => "{{ES_PASSWORD}}"
      index => "{{INDEX_LOG_TYPE_2}}"  # e.g. entapp
    }
  }

  # Optional debug output
  stdout { codec => rubydebug }
}
